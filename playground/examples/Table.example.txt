class TableExample extends React.Component{

    constructor(props){
        super(props);

        this.logIt = this.logIt.bind(this);
        this.onClick = this.onClick.bind(this);
        this.tableContent = this.tableContent.bind(this);
        this.onSearch = this.onSearch.bind(this);
        this.getFiltered = this.getFiltered.bind(this);
        this.onRowClick = this.onRowClick.bind(this);

        this.state = {
            tableContent: [],
            search: '',
            data: [
                {
                    actions: [<SmallIconButton key={0} transparent icon="face"/>, <SmallIconButton key={1} transparent icon="check"/>],
                    campaign: 'Newsletters for everybody',
                    click: '50 %',
                    delivered: '13-06-2017 10:59 AM',
                    mailingList: 'Mailing list for me',
                    open: '75 %',
                    status: 'Sent',
                    subscribers: 2947,
                },
                {
                    actions: <SmallIconButton transparent icon="check"/>,
                    campaign: 'Another campaign',
                    click: '25 %',
                    delivered: '17-02-2017 10:51 AM',
                    mailingList: 'Mailing list for me',
                    open: '60 %',
                    status: 'Sent',
                    subscribers: 1628,
                    onClick: (e, data) => {console.log(e, data)}
                },
                {
                    actions: <SmallIconButton transparent icon="edit"/>,
                    campaign: 'This row can be expanded',
                    click: '22 %',
                    delivered: '12-07-2011 09:35 PM',
                    mailingList: 'Some Mailing list',
                    open: '12 %',
                    status: 'Pending',
                    subscribers: 5321,
                    style: {cursor: 'pointer'},
                    onClick: this.onRowClick,
                    expandable: {
                        expanded: false,
                        content: <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: 70}}>This is the expanded section</div>
                    }
                },
                {
                    actions: <SmallIconButton transparent icon="edit"/>,
                    campaign: 'Airship ready campaign',
                    click: '80 %',
                    delivered: '31-12-2016 04:39 PM',
                    mailingList: 'Mailing list for me',
                    open: '93 %',
                    status: 'Draft',
                    subscribers: 4244,
                },
                {
                    actions: <SmallIconButton transparent icon="close"/>,
                    campaign: 'Some campaign name',
                    click: '20 %',
                    delivered: '12-05-2015 04:39 PM',
                    mailingList: 'Another Mailing list',
                    open: '45 %',
                    status: 'Sent',
                    subscribers: 8503,
                },
                {
                    actions: <SmallIconButton transparent icon="edit"/>,
                    campaign: 'Pascal cards are here',
                    click: '95 %',
                    delivered: '30-05-2017 04:39 PM',
                    mailingList: 'Gamer Mailing list',
                    open: '99 %',
                    status: 'Sent',
                    subscribers: 56321,
                    style: {cursor: 'pointer'},
                    onClick: this.onRowClick,
                    expandable: {
                        expanded: true,
                        content: <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: 70}}>This is the expanded section</div>
                    }
                },
                {
                    actions: <SmallIconButton transparent icon="check"/>,
                    campaign: 'Random Campaign',
                    click: '50 %',
                    delivered: '11-02-2014 04:39 PM',
                    mailingList: 'Another Mailing list',
                    open: '55 %',
                    status: 'Draft',
                    subscribers: 1234,
                }
            ]
        };
    }

    componentDidMount() {
        this.setState({tableContent: this.tableContent()})
    }

    render(){

        const spanStyle = {
            background: 'yellow',
            width: '8px',
            height: '8px',
            borderRadius: '50%',
            marginRight: '10px'
        };

        const paginationProps = {
            lastBtn: false,
            firstBtn: false,
            style: {color: 'blue'}
        }

        const filtered = this.getFiltered();

        return(
            <div>
                <Input
                    label="Search by title"
                    value={this.state.search}
                    placeholder="Title..."
                    style={{marginBottom: 20}}
                    onChange={this.onSearch}
                />
                <Table data={filtered} paginate={10} smallCollapse>
                    <TableHeader dataField="campaign" sortable>Campaigns</TableHeader>
                    <TableHeader dataField="title" hideSmall sortable >Title</TableHeader>
                    <TableHeader dataField="open" sortable sortfn={this.logIt} hideSmall>Open %</TableHeader>
                </Table>
                <Table data={this.state.data} smallCollapse>
                    <TableHeader dataField="campaign" sortable>Campaigns</TableHeader>
                    <TableHeader dataField="mailingList" hideSmall sortable >Mailing List</TableHeader>
                    <TableHeader dataField="delivered" sortable>Delivered</TableHeader>
                    <TableHeader dataField="status" sortable>Status</TableHeader>
                    <TableHeader dataField="open" sortable sortfn={this.logIt} hideSmall>Open %</TableHeader>
                    <TableHeader dataField="click" sortable>Clicks</TableHeader>
                    <TableHeader dataField="subscribers" sortable>Subscribers</TableHeader>
                    <TableHeader dataField="actions" sortable>Actions</TableHeader>
                </Table>
            </div>
        );
    }

    onClick() {
        this.setState({data: this.state.data.splice(2, 4)});
    }

    logIt(a, b, order, sortBy) {

        let comparison = 0;

        if (order === 'desc'){

            console.log('desc called');

            if (a[sortBy] > b[sortBy]){
                comparison = -1;
            } else if (a[sortBy] < b[sortBy]){
                comparison = 1;
            }
            return comparison;
        } else if (order === 'asc') {

            console.log('asc called');

            if (a[sortBy] < b[sortBy]){
                comparison = -1;
            } else if (a[sortBy] > b[sortBy]){
                comparison = 1;
            }
            return comparison;
        }

    }

    tableContent() {
        const tableContent = [];
        let campaign = 10;
        for(let i = 0; i < 2000; i++){
            if (i % 10 === 0){
                campaign = i;
            }
            tableContent.push({
                campaign: 'campaign ' + campaign,
                title: 'title ' + i,
                open: i
            });
        }
        return tableContent;
    }

    onSearch(e, data) {
        this.setState({search: data.value})
    }

    getFiltered() {
        if (this.state.search && this.state.search !== ''){
            return this.state.tableContent.filter((row) => {
                return row.title.includes(this.state.search)
            });
        }
        return this.state.tableContent;
    }

    onRowClick(e, data){
        const dataArray = [...this.state.data];
        let targetObject = dataArray[data.index];
        let newExpandable = targetObject.expandable;
        newExpandable = {...newExpandable, expanded: !newExpandable.expanded};
        targetObject.expandable = newExpandable;
        dataArray.splice(data.index, 1, targetObject);
        this.setState({data: dataArray});
        console.log(targetObject, dataArray);
    }


}
