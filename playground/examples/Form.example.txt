class FormExample extends React.Component {

    constructor(){
        super();

        this.onSubmit = this.onSubmit.bind(this);
        this.setValue = this.setValue.bind(this);
        this.setValidatedValue = this.setValidatedValue.bind(this);
        this.getDate = this.getDate.bind(this);
        this.reset = this.reset.bind(this);
        this.onAdd = this.onAdd.bind(this);
        this.onRemove = this.onRemove.bind(this);
        this.validateForm = this.validateForm.bind(this);
        this.validateInput = this.validateInput.bind(this);
        this.validateCheckbox = this.validateCheckbox.bind(this);
        this.validateSelect = this.validateSelect.bind(this);
        this.validateDate = this.validateDate.bind(this);

        this.state = {
            contact: {
                value: [
                    {
                        checked: true,
                        value: 'email',
                        label:'Email'
                    },
                    {
                        checked: false,
                        value: 'tel',
                        label: 'Telephone'
                    },
                    {
                        checked: false,
                        value: 'skype',
                        label: 'Skype'
                    },
                    {
                        checked: false,
                        value: 'raven',
                        label: 'Raven'
                    },
                    {
                        checked: false,
                        value: 'palantir',
                        label: 'Palantír'
                    }
                ],
                status: '',
                message: ''
            },
            country: {value: '', status: '', message: ''},
            email: {value: '', status: '', message: ''},
            firstname: {value: '', status: '', message: ''},
            lastname: {value: '', status: '', message: ''},
            position: [
                {
                    selected: false,
                    value: 'fontend',
                    label: 'Frontend Developer'
                },
                {
                    selected: true,
                    value: 'backend',
                    label: 'Backend Developer'
                }
            ],
            salary: '',
            message: EditorState.createEmpty(),
            duration: {value: undefined, status: '', message: ''},
            start: {value: moment(), status: '', message: ''},
            coverletter: {value: '', status: '', message: ''},
            logo: {value: undefined, status: '', message: ''},
            training: true,
            tags: ['avid']
        };
    }

    render() {

        return(
            <div>
                <H2>Forms/FormGroups</H2>
                <Form onSubmit={this.onSubmit}>
                    <FormGroup horizontal>
                        <FormGroup >
                            <Input
                                required
                                label="Firstname:"
                                onChange={this.setValidatedValue}
                                dataLabel="firstname"
                                value={this.state.firstname.value}
                                status={this.state.firstname.status}
                                description={this.state.firstname.message}
                                validate={this.validateInput}
                            />
                            <Input
                                required
                                label="Lastname:"
                                onChange={this.setValidatedValue}
                                dataLabel="lastname"
                                value={this.state.lastname.value}
                                status={this.state.lastname.status}
                                description={this.state.lastname.message}
                                validate={this.validateInput}
                            />
                            <Input
                                required
                                label="Email:"
                                type="email"
                                onChange={this.setValidatedValue}
                                dataLabel="email"
                                value={this.state.email.value}
                                status={this.state.email.status}
                                description={this.state.email.message}
                                validate={this.validateInput}
                            />
                            <Input
                                label="Country:"
                                onChange={this.setValidatedValue}
                                dataLabel="country"
                                value={this.state.country.value}
                                status={this.state.country.status}
                                description={this.state.country.message}
                                validate={this.validateInput}
                            />
                            <RadioGroup
                                title="Position:"
                                dataLabel="position"
                                onChange={this.setValue}
                                selectedRadios={this.state.position}
                            >
                                <Radio
                                    value="fontend"
                                    label="Frontend Developer"
                                />
                                <Radio
                                    value="backend"
                                    label="Backend Developer"
                                />
                            </RadioGroup>
                        </FormGroup>
                        <FormGroup >
                            <Switch
                                label="Training:"
                                onLabel="Done"
                                offLabel="Ongoing"
                                on={this.state.training}
                                onClick={this.setValue}
                                dataLabel="training"
                            />
                            <TextArea
                                rows={11}
                                label="Cover Letter:"
                                onChange={this.setValidatedValue}
                                dataLabel="coverletter"
                                value={this.state.coverletter.value}
                                status={this.state.coverletter.status}
                                description={this.state.coverletter.message}
                            />
                            <TextArea
                                richEditor
                                richValue = {this.state.message}
                                dataLabel = "message"
                                onChange = {this.getDate}
                            />
                            <CheckboxGroup
                                required
                                onChange={this.setValidatedValue}
                                title="Contact"
                                dataLabel="contact"
                                horizontal
                                selectedChecks={this.state.contact.value}
                                status={this.state.contact.status}
                                description={this.state.contact.message}
                                validate={this.validateCheckbox}
                            >
                                <Checkbox value="email" label="Email" />
                                <Checkbox value="tel" label="Telephone" />
                                <Checkbox value="skype" label="Skype" />
                                <Checkbox value="raven" label="Raven" />
                                <Checkbox value="palantir" label="Palantír" />
                            </CheckboxGroup>
                        </FormGroup>
                    </FormGroup>
                    <FormGroup >
                        <Input
                            label="Desired Salary:"
                            onChange={this.setValue}
                            dataLabel="salary"
                            type="number"
                            value={this.state.salary}
                        />
                        <DatePicker
                            required
                            placeholder="Select a date"
                            onChange={this.getDate}
                            dataLabel="start"
                            label={'Available to start:'}
                            date={this.state.start.value}
                            status={this.state.start.status}
                            description={this.state.start.message}
                            validate={this.validateDate}
                        />
                        <FileUpload
                            dataLabel="logo"
                            label="Logo:"
                            onChange={this.setValidatedValue}
                            accept=".png"
                            files={this.state.logo.value}
                            status={this.state.logo.status}
                            description={this.state.logo.message}
                        />
                        <Select
                            required
                            dataLabel="duration"
                            onChange={this.setValidatedValue}
                            label="Training duration:"
                            selected={this.state.duration.value}
                            status={this.state.duration.status}
                            description={this.state.duration.message}
                            validate={this.validateSelect}
                        >
                            <Option value="asap">Asap</Option>
                            <Option value="1-4w">1-4 weeks</Option>
                            <Option value="1-3m">1-3 months</Option>
                            <Option value="3-6m">3-6 months</Option>
                        </Select>
                        <Tags label="Tag yourself" tags={this.state.tags} onAdd={this.onAdd} onRemove={this.onRemove} dataLabel="tags" />
                    </FormGroup>
                    <FormGroup style={{flexDirection: 'row'}}>
                        <Button type="submit">Submit</Button>
                        <Button onClick={this.reset}>Reset</Button>
                    </FormGroup>
                </Form>
            </div>
        );
    }

    reset() {
        this.setState({
            contact: [
                {
                    checked: false,
                    value: 'email',
                    label:'Email'
                },
                {
                    checked: false,
                    value: 'tel',
                    label: 'Telephone'
                },
                {
                    checked: false,
                    value: 'skype',
                    label: 'Skype'
                },
                {
                    checked: false,
                    value: 'raven',
                    label: 'Raven'
                },
                {
                    checked: false,
                    value: 'palantir',
                    label: 'Palantír'
                }
            ],
            country: '',
            coverletter: '',
            email: '',
            firstname: '',
            lastname: '',
            position: [{selected: true, value: 'fontend', label: 'Frontend Developer' }, {selected: false, value: 'backend', label: 'Backend Developer'}],
            salary: '',
            message: EditorState.createEmpty(),
            duration: '',
            start: '',
            training: false,
            tags: []
        });
    }

    onSubmit(e, data) {
        console.log(data.value);
    }

    setValidatedValue(e, data) {
        data.dataLabel && this.setState({[data.dataLabel]: {value: data.value}});
    }

    setValue(e, data){
        data.dataLabel && this.setState({[data.dataLabel]: data.value});
    }

    getDate(data) {
        console.log(data.value);
        data.dataLabel && this.setState({[data.dataLabel]: {value: data.value}});
    }

    onAdd(e, data) {
        console.log(data.value);
        data.dataLabel && this.setState({[data.dataLabel]: this.state[data.dataLabel].concat(data.value)});
    }

    onRemove(e, data, index) {
        console.log(data.value, index);
        let tags = [...this.state[data.dataLabel]];
        tags.splice(index, 1);
        data.dataLabel && this.setState({[data.dataLabel]: tags});
    }

    validateForm(dataLabel){
        this.setState({[dataLabel]: {status: 'error', message: 'This Field is required'}});
    }

    validateInput(data){
        if (data.value){
            if (data.value.length < 5){
                this.setState({[data.dataLabel]: {value: data.value, status: 'error', message: 'Input should have 5 or more characters'}});
                return false;
            } else {
                this.setState({[data.dataLabel]: {value: data.value, status: 'success', message: ''}});
                return true;
            }
        } else if(!data.value && data.required) {
            this.setState({[data.dataLabel]: {value: data.value, status: 'error', message: 'This input field is required'}});
            return false;
        }
    }

    validateCheckbox(data){
        let checked = 0
        data.value.map((check) => {
            if (check.checked === true){
                checked = checked + 1;
            }
        });
        if (checked < 3){
            this.setState({[data.dataLabel]: {value: data.value, status: 'error', message: 'At least three contact methods must be selected'}});
            return false;
        }
        return true;
    }

    validateSelect(data){
        if (!data.value && data.required){
            this.setState({[data.dataLabel]: {value: data.value, status: 'error', message: 'Please select an option first'}});
            return false;
        }
        return true;
    }

    validateDate(data){
        if(moment(data.value) < moment()){
            this.setState({[data.dataLabel]: {value: moment(), status: 'error', message: 'Trying to select a past date'}});
            return false;
        }
        return true;
    }

}
